VERSION = 0.0.1
PASSENGER_VER = 0.9.10

NAME = pinterb
IMAGE_UBUNTU = ubuntu
IMAGE_PHUSION = phusion

.PHONY: all build_all tag_latest release clean clean_untagged \
				prep_phusion_base test_phusion_base build_phusion_base \
				prep_ubuntu_base test_ubuntu_base build_ubuntu_base \
				prep_phusion_golang test_phusion_golang build_phusion_golang \
				prep_ubuntu_golang test_ubuntu_golang build_ubuntu_golang \
				build_python test_python \
				build_ansible test_ansible \
				build_jvm test_jvm \
				build_graven test_graven \
				build_golang test_golang

all: build_all

build_all: build_base build_python build_ansible \
           build_jvm build_graven build_golang

build_base: build_phusion_base build_ubuntu_base
build_golang: build_phusion_golang build_ubuntu_golang

prep_phusion_base:
		rm -rf $(IMAGE_PHUSION)_base_image
		cp -pR templates/base/phusion $(IMAGE_PHUSION)_base_image
		cp -p templates/base/Dockerfile $(IMAGE_PHUSION)_base_image/Dockerfile
		# Build out the Dockerfile
		sed -i 's/###-->ZZZ_IMAGE<--###/$(NAME)\/$(IMAGE_PHUSION)-base/g' $(IMAGE_PHUSION)_base_image/Dockerfile
		sed -i 's/###-->ZZZ_VERSION<--###/$(VERSION)/g' $(IMAGE_PHUSION)_base_image/Dockerfile
		sed -i 's/###-->ZZZ_BASE_IMAGE<--###/phusion\/passenger-customizable:$(PASSENGER_VER)/g' $(IMAGE_PHUSION)_base_image/Dockerfile
		#sed -i "s/###-->ZZZ_ENABLE_REPOS<--###/$(cat templates/base/phusion/values/repos.md)/g" $(IMAGE_PHUSION)_base_image/Dockerfile
		#export ENABLE_REPOS=`cat templates/base/phusion/values/repos.md`
		#sed -i 's/###-->ZZZ_ENABLE_REPOS<--###/$(ENABLE_REPOS)/g' $(IMAGE_PHUSION)_base_image/Dockerfile
		#sed -i "s/###-->ZZZ_ENABLE_REPOS<--###/$(shell cat templates\/base\/phusion\/values\/repos.md)/g" $(IMAGE_PHUSION)_base_image/Dockerfile
		#sed -i "s/###-->ZZZ_FINALIZE<--###/$(shell cat templates\/base\/phusion\/values\/finalize.md)/g" $(IMAGE_PHUSION)_base_image/Dockerfile
		#perl -p -i -e "s/###-->ZZZ_FINALIZE<--###/$(shell cat templates\/base\/phusion\/values\/finalize.md)/g" $(IMAGE_PHUSION)_base_image/Dockerfile
		#sed -i "s/###-->ZZZ_CMD_ENTRYPOINT<--###/$(shell cat templates\/base\/phusion\/values\/cmdentrypoint.md)/g" $(IMAGE_PHUSION)_base_image/Dockerfile

test_phusion_base: prep_phusion_base
		rm -f $(IMAGE_PHUSION)_base_image/test/ubuntu_*_spec.rb
		$(IMAGE_PHUSION)_base_image/test/verify.sh --force --image=$(NAME)/$(IMAGE_PHUSION)-base-sspectest ; /usr/bin/test "$$?" -eq 0

build_phusion_base: test_phusion_base
		docker build --rm -t $(NAME)/$(IMAGE_PHUSION)-base:$(VERSION) $(IMAGE_PHUSION)_base_image





prep_ubuntu_base:
		rm -rf $(IMAGE_UBUNTU)_base_image
		cp -pR images/base $(IMAGE_UBUNTU)_base_image
		cp -p images/ubuntu/Dockerfile $(IMAGE_UBUNTU)_base_image/Dockerfile
		cp -p images/buildconfig $(IMAGE_UBUNTU)_base_image/buildconfig
		echo image_ubuntu=1 >> $(IMAGE_UBUNTU)_base_image/buildconfig

test_ubuntu_base: prep_ubuntu_base
		rm -f $(IMAGE_PHUSION)_base_image/test/phusion_*_spec.rb
#N/A		$(IMAGE_UBUNTU)_base_image/test/verify.sh --force --image=$(NAME)/$(IMAGE_UBUNTU)-base-sspectest ; /usr/bin/test "$$?" -eq 0

build_ubuntu_base: test_ubuntu_base
		docker build --rm -t $(NAME)/$(IMAGE_UBUNTU)-base:$(VERSION) $(IMAGE_UBUNTU)_base_image














prep_phusion_golang:
		rm -rf $(IMAGE_PHUSION)_golang_image
		cp -pR images/golang $(IMAGE_PHUSION)_golang_image
		cp -p images/phusion/Dockerfile $(IMAGE_PHUSION)_golang_image/Dockerfile
		sed -i 's/phusion\/passenger-customizable/pinterb\/phusion-base/g' $(IMAGE_PHUSION)_golang_image/Dockerfile
		sed -i 's/$(PASSENGER_VER)/$(VERSION)/g' $(IMAGE_PHUSION)_golang_image/Dockerfile
		cp -p images/buildconfig $(IMAGE_PHUSION)_golang_image/buildconfig
		echo image_phusion=1 >> $(IMAGE_PHUSION)_golang_image/buildconfig

test_phusion_golang: prep_phusion_golang
		rm -f $(IMAGE_PHUSION)_golang_image/test/ubuntu_*_spec.rb
		$(IMAGE_PHUSION)_golang_image/test/verify.sh --force --image=$(NAME)/$(IMAGE_PHUSION)-golang-sspectest ; /usr/bin/test "$$?" -eq 0

build_phusion_golang: test_phusion_golang
		docker build --rm -t $(NAME)/$(IMAGE_PHUSION)-golang:$(VERSION) $(IMAGE_PHUSION)_golang_image

prep_ubuntu_golang:
		rm -rf $(IMAGE_UBUNTU)_golang_image
		cp -pR images/golang $(IMAGE_UBUNTU)_golang_image
		cp -p images/ubuntu/Dockerfile $(IMAGE_UBUNTU)_golang_image/Dockerfile
		cp -p images/buildconfig $(IMAGE_UBUNTU)_golang_image/buildconfig
		echo image_ubuntu=1 >> $(IMAGE_UBUNTU)_golang_image/buildconfig

test_ubuntu_golang: prep_ubuntu_golang
		rm -f $(IMAGE_PHUSION)_golang_image/test/phusion_*_spec.rb
#N/A		$(IMAGE_UBUNTU)_golang_image/test/verify.sh --force --image=$(NAME)/$(IMAGE_UBUNTU)-golang-sspectest ; /usr/bin/test "$$?" -eq 0

build_ubuntu_golang: test_ubuntu_golang
		docker build --rm -t $(NAME)/$(IMAGE_UBUNTU)-golang:$(VERSION) $(IMAGE_UBUNTU)_golang_image







test_python: python/test/verify.sh --force ; /usr/bin/test "$$?" -eq 0

build_python: test_python
		rm -rf python_image
		cp -pR python python_image
		docker build --rm -t $(NAME)-python:$(VERSION) python_image

test_ansible:
		ansible/test/verify.sh --force ; /usr/bin/test "$$?" -eq 0

build_ansible: test_ansible
		rm -rf ansible_image
		cp -pR ansible ansible_image
		docker build --rm -t $(NAME)-ansible:$(VERSION) ansible_image

test_jvm:
		jvm/test/verify.sh --force ; /usr/bin/test "$$?" -eq 0

build_jvm: test_jvm
		rm -rf jvm_image
		cp -pR jvm jvm_image
		docker build --rm -t $(NAME)-jvm:$(VERSION) jvm_image

test_graven:
		graven/test/verify.sh --force ; /usr/bin/test "$$?" -eq 0

build_graven: test_graven
		rm -rf graven_image
		cp -pR graven graven_image
		docker build --rm -t $(NAME)-graven:$(VERSION) graven_image

test_golang:
		golang/test/verify.sh --force ; /usr/bin/test "$$?" -eq 0

build_golang: test_golang
		rm -rf golang_image
		cp -pR golang golang_image
		docker build --rm -t $(NAME)-golang:$(VERSION) golang_image



tag_latest:
		docker tag $(NAME)/$(IMAGE_PHUSION)-base:$(VERSION) $(NAME)/$(IMAGE_PHUSION)-base:latest
		docker tag $(NAME)/$(IMAGE_UBUNTU)-base:$(VERSION) $(NAME)/$(IMAGE_UBUNTU)-base:latest
		docker tag $(NAME)/$(IMAGE_PHUSION)-golang:$(VERSION) $(NAME)/$(IMAGE_PHUSION)-golang:latest
		docker tag $(NAME)/$(IMAGE_UBUNTU)-golang:$(VERSION) $(NAME)/$(IMAGE_UBUNTU)-golang:latest

release: tag_latest
		@if ! docker images $(NAME)/$(IMAGE_PHUSION)-base | awk '{ print $$2 }' | grep -q -F $(VERSION); then echo "$(NAME)/$(IMAGE_PHUSION)-base version $(VERSION) is not yet built. Please run 'make build'"; false; fi
		@if ! docker images $(NAME)/$(IMAGE_UBUNTU)-base | awk '{ print $$2 }' | grep -q -F $(VERSION); then echo "$(NAME)/$(IMAGE_UBUNTU)-base version $(VERSION) is not yet built. Please run 'make build'"; false; fi
		@if ! docker images $(NAME)/$(IMAGE_PHUSION)-golang | awk '{ print $$2 }' | grep -q -F $(VERSION); then echo "$(NAME)/$(IMAGE_PHUSION)-golang version $(VERSION) is not yet built. Please run 'make build'"; false; fi
		@if ! docker images $(NAME)/$(IMAGE_UBUNTU)-golang | awk '{ print $$2 }' | grep -q -F $(VERSION); then echo "$(NAME)/$(IMAGE_UBUNTU)-golang version $(VERSION) is not yet built. Please run 'make build'"; false; fi
		docker push $(NAME)/$(IMAGE_PHUSION)-base
		docker push $(NAME)/$(IMAGE_UBUNTU)-base
		docker push $(NAME)/$(IMAGE_PHUSION)-golang
		docker push $(NAME)/$(IMAGE_UBUNTU)-golang
		@echo "*** Don't forget to create a tag. git tag rel-$(VERSION) && git push origin rel-$(VERSION)"

clean: clean_untagged
		rm -rf $(IMAGE_PHUSION)_base_image
		rm -rf $(IMAGE_UBUNTU)_base_image
		rm -rf $(IMAGE_PHUSION)_golang_image
		rm -rf $(IMAGE_UBUNTU)_golang_image

clean_untagged:
		for i in `docker ps --no-trunc -a -q`;do docker rm $$i;done
		docker images --no-trunc | grep none | awk '{print $$3}' | xargs -r docker rmi
